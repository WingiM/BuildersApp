@page "/projects/{id:int}"
@using BuildersApp.Core.Models
@using BuildersApp.Core.Models.UserInfo
@using BuildersApp.Core.Repositories
@using BuildersApp.Core.Services.Interfaces
@using BuildersApp.Core.Enums
@using WaterForm = BuildersApp.Shared.WaterForm
@inject NavigationManager NavigationManager
@inject IProjectRepository ProjectRepository;
@inject IUserIdentityService UserIdentityService;

@if (_project is not null)
{
    <h3>@_project.Name</h3>
}

@if (_user is not null && _project is not null)
{
    <p>Developer: @_project.Developer.Name</p>
    <p>Designer: @_project.Designer.Name</p>
    <ProjectDocumentsView User="_user" Project="_project"/>
    if (_user.Role is Roles.Designer or Roles.Customer)
    {
        if (_project.IndustryType == IndustryTypes.GasSupply)
        {
            <GasForm ProjectId="_project.Id" Editable="@(_user.Role==Roles.Designer)"/>
        }
        else
        {
            <WaterForm ProjectId="_project.Id" Editable="@(_user.Role==Roles.Designer)"/>
        }
    }
}


@code {

    [Parameter]
    public int Id { get; set; }

    private User? _user;

    private Project _project;

    protected override async Task OnInitializedAsync()
    {
        if (UserIdentityService.CurrentUser is null)
        {
            return;
        }
        _user = UserIdentityService.CurrentUser;
        _project = await ProjectRepository.GetProject(Id, UserIdentityService.CurrentUser.Role);
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        _user = UserIdentityService.CurrentUser;
        return Task.CompletedTask;
    }



}