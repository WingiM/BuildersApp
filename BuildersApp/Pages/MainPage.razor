@page "/Projects";
@using BuildersApp.Core.Repositories
@using BuildersApp.Core.Services.Interfaces
@using BuildersApp.Core.Models
@using BuildersApp.Core.Models.UserInfo
@using BuildersApp.Core.Enums
@inject IProjectRepository ProjectRepository;
@inject IUserIdentityService UserIdentityService;
@inject NavigationManager NavigationManager
<h3>Projects</h3>

<button hidden="@_noData" class="btn btn-primary" @onclick="CreateNewProject">@_btnText</button>

<div hidden="@(!_noData)" class="alert alert-info" role="alert">
    Please enter your personal data in cabinet!
</div>

@if (_hideProjects)
{
    <CreateProject Customer="@_user"/>
}

@if (_projectsInitialized)
{
    <div hidden="@_hideProjects" style="display: flex; flex-direction: row; flex-wrap: wrap;">
        @foreach (var project in _projects)
        {
            <div class="card" style="width: 18rem; margin: 5px;">
                <div class="card-body">
                    <h5 class="card-title">@project.Name</h5>
                    <p class="card-text">@project.DateCreated.ToString("D") <br> Author: @project.AuthorName</p>
                    <a href="/projects/@project.Id">View project</a>
                </div>
            </div>
        }
    </div>
}

@code {
    private bool _projectsInitialized;
    private bool _hideProjects;
    private bool _noData;
    private string _btnText = "Add new project";
    private List<ProjectInfo> _projects;
    private bool _firstRender = true;
    private User? _user;
    

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        _user = UserIdentityService.CurrentUser;
        if (_user is null || _user.Role != Roles.Customer)
        {
            NavigationManager.NavigateTo("/NotFound");
            return;
        }

        if (_user.PersonalInfo is not CustomerPersonalInfo data)
        {
            _noData = true;
            if (firstRender)
                StateHasChanged();
            return;
        }
        _projects = (await ProjectRepository.ListProjects(data!.IndustryType)).ToList();
        _projectsInitialized = true;
        if (_firstRender)
        {
            StateHasChanged();
            _firstRender = false;
        }
    }

    private async Task CreateNewProject()
    {
        _hideProjects = !_hideProjects;
        _btnText = _hideProjects ? "Show existing projects" : "Add new project";
        if (_user!.PersonalInfo is not CustomerPersonalInfo data)
            return;
        _projects = (await ProjectRepository.ListProjects(data!.IndustryType)).ToList();
        StateHasChanged();
    }

}